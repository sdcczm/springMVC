<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:mvc="http://www.springframework.org/schema/mvc"
	xmlns:context="http://www.springframework.org/schema/context"
	xmlns:aop="http://www.springframework.org/schema/aop" xmlns:tx="http://www.springframework.org/schema/tx"
	xsi:schemaLocation="http://www.springframework.org/schema/beans   
            http://www.springframework.org/schema/beans/spring-beans-3.0.xsd   
            http://www.springframework.org/schema/mvc   
            http://www.springframework.org/schema/mvc/spring-mvc-3.0.xsd   
            http://www.springframework.org/schema/context   
            http://www.springframework.org/schema/context/spring-context-3.0.xsd   
            http://www.springframework.org/schema/aop   
            http://www.springframework.org/schema/aop/spring-aop-3.0.xsd   
            http://www.springframework.org/schema/tx   
            http://www.springframework.org/schema/tx/spring-tx-3.0.xsd ">

	<!-- 扫描service,对@Service类进行管理 -->
	<context:component-scan base-package="com.example.service" />

	<!--读取数据库配置 jdbc.properites -->
	<context:property-placeholder location="classpath:jdbc.properties" />

	<!--Spring提供的数据库连接池 数据源dbcp -->
	<bean id="dataSource" class="org.apache.commons.dbcp.BasicDataSource"
		destroy-method="close">
		<property name="driverClassName" value="${jdbc.driver}" />
		<property name="url" value="${jdbc.url}" />
		<property name="username" value="${jdbc.username}" />
		<property name="password" value="${jdbc.password}" />
		<!-- 初始化连接大小 -->
		<property name="initialSize" value="${jdbc.initialSize}"></property>
		<!-- 连接池最大数量 -->
		<property name="maxActive" value="${jdbc.maxActive}"></property>
		<!-- 连接池最大空闲 -->
		<property name="maxIdle" value="${jdbc.maxIdle}"></property>
		<!-- 连接池最小空闲 -->
		<property name="minIdle" value="${jdbc.minIdle}"></property>
		<!-- 获取连接最大等待时间 -->
		<property name="maxWait" value="${jdbc.maxWait}"></property>
	</bean>

	<!--配置SqlSessionFactory对象 -->
	<bean id="sqlSessionFactory" class="org.mybatis.spring.SqlSessionFactoryBean">
		<!--注入数据库连接池 -->
		<property name="dataSource" ref="dataSource" />
		<!--配置mybatis全局配置文件:mybatis-config.xml -->
		<property name="configLocation" value="classpath:mybatis-config.xml" />
		<!--扫描entity包,使用别名,多个用;隔开 -->
		<property name="typeAliasesPackage" value="com.example.model" />
		<!--扫描sql配置文件:mapper需要的xml文件 -->
		<property name="mapperLocations" value="classpath:mapper/*.xml" />
	</bean>


	<!--配置扫描Dao接口包,动态实现DAO接口,注入到spring容器(与hibernate不同，mybatis只定义了接口，需要mybatis.spring实现接口) -->
	<bean class="org.mybatis.spring.mapper.MapperScannerConfigurer">
		<!--注入SqlSessionFactory -->
		<property name="sqlSessionFactoryBeanName" value="sqlSessionFactory" />
		<!-- 给出需要扫描的Dao接口 -->
		<property name="basePackage" value="com.example.dao" />
	</bean>
	
<!--     mybatis的XML文件修改实现热部署
	<bean class="com.baomidou.mybatisplus.spring.MybatisMapperRefresh">
        <constructor-arg name="sqlSessionFactory" ref="sqlSessionFactory"/>
        <constructor-arg name="mapperLocations" value="classpath:mapper/*.xml"/>
        <constructor-arg name="delaySeconds" value="5"/>
        <constructor-arg name="sleepSeconds" value="10"/>
        <constructor-arg name="enabled" value="true"/>
    </bean> -->


	<!--配置事务管理器(mybatis采用的是JDBC的事务管理器) -->
	<bean id="transactionManager"
		class="org.springframework.jdbc.datasource.DataSourceTransactionManager">
		<property name="dataSource" ref="dataSource"></property>
	</bean>

	<!--配置基于注解的声明式事务,默认使用注解来管理事务行为 -->
	<tx:annotation-driven transaction-manager="transactionManager" />


	<!-- <tx:advice id="transactionAdvice" transaction-manager="transactionManager"> 
		<tx:attributes> <tx:method name="add*" propagation="REQUIRED" /> <tx:method 
		name="append*" propagation="REQUIRED" /> <tx:method name="insert*" propagation="REQUIRED" 
		/> <tx:method name="save*" propagation="REQUIRED" /> <tx:method name="update*" 
		propagation="REQUIRED" /> <tx:method name="modify*" propagation="REQUIRED" 
		/> <tx:method name="edit*" propagation="REQUIRED" /> <tx:method name="delete*" 
		propagation="REQUIRED" /> <tx:method name="remove*" propagation="REQUIRED" 
		/> <tx:method name="repair" propagation="REQUIRED" /> <tx:method name="delAndRepair" 
		propagation="REQUIRED" /> <tx:method name="get*" propagation="SUPPORTS" /> 
		<tx:method name="find*" propagation="SUPPORTS" /> <tx:method name="load*" 
		propagation="SUPPORTS" /> <tx:method name="search*" propagation="SUPPORTS" 
		/> <tx:method name="datagrid*" propagation="SUPPORTS" /> <tx:method name="*" 
		propagation="SUPPORTS" /> </tx:attributes> </tx:advice> -->
	<!-- <aop:config> <aop:pointcut id="transactionPointcut" expression="execution(* 
		com.yingjun.test.service..*Impl.*(..))" /> <aop:advisor pointcut-ref="transactionPointcut" 
		advice-ref="transactionAdvice" /> </aop:config> -->
</beans>    